package aditya00;

import java.util.Scanner;

public class Timepass {
	
	
	public static Node del_front(Node head)
	{
		head=head.next;
		return head;
	}
	
	public static Node del_end(Node head)
	{
		Node temp=head;
		while(temp.next!=null &&temp.next.next!=null)
		{
			temp=temp.next;
		}
		if(temp.next==null)
		{
			temp=null;
			//return head;
		}
		else
		{
			temp.next=null;
		}
		return temp;
	}
	
	
	
	
	public static Node ins_front(Node head,int data)
	{
		Node newnode= new Node(data);
		newnode.next=head;
		head=newnode;
		return head;
	}
	
	public static Node ins_end(Node head,int data)
	{
		Node newnode=new Node(data);
		Node temp=head;
		while(temp.next!=null)
		{
			temp=temp.next;
		}
		temp.next=newnode;
		return head;
	}
	
	
	
	public static void mid(Node head)
	{
		Node slow=head;
		Node fast=head.next;
		while(fast!=null && fast.next!=null)
		{
			slow=slow.next;
			fast=fast.next.next;
		}
		System.out.println("mid ele of list is "+slow.data);
	}
	
	
	
	public static Node delete1(Node head,int d)
	{
		Node temp=head;
		if(head.data==d)
		{
			Node a=head.next;
			head=a;
			return head;
		}
		else
		{
			while(temp.next!=null && (temp.next).data!=d)// important condition
			{
				temp=temp.next;
			}
			if(temp.next!=null)
			{
				Node a=(temp.next).next;
				temp.next=a;
				return head;
			}
			else
			{
				System.out.println("ele not found in list");
				return head;
			}
		}
		
	}
	
	public static Node delete(Node head,int i)
	{
		Node temp=head;
		if(i==0)
		{
			Node a=head.next;
			head=a;
			return head;
		}
		else
		{
			int c=0;
			while(c<i-1 && temp!=null)
			{
				temp=temp.next;
				c++;
			}
			if(temp.next!=null) 
			{
				Node a=temp.next;
				Node b=a.next;
				temp.next=b;
			}
		}
		return head;
	}
	public static void print(Node head)
	{
		if(head==null)
		{
			System.out.println("list is empty");
		}
		else
		{
			while(head!=null)
			{
				System.out.print(head.data+" ");
				head=head.next;
			}
			System.out.println();
		}
	}

	
	
	
	
	public static Node insert(Node head,int i,int data)
	{
		Node newnode=new Node(data);
		int c=0;
		Node temp=head;
		if(i==0)
		{
			newnode.next=head;
			head=newnode;
			return head;
		}
		while(c<i-1 && temp.next!=null)
		{
			temp=temp.next;
			c++;
		}
		if(temp.next!=null) 
		{
			newnode.next=temp.next;
			temp.next=newnode;
			/*
			or 
			Node a=temp.next;
			temp.next=newnode;
			newnode.next=a;
			*/
		}
		return head;
	}

	
	
	
	
	
	
	public static Node input()
	{
		Scanner in= new Scanner(System.in);
		int data;
		System.out.println("enter -1 to stop taking input");
		data=in.nextInt();
		Node head= null;
		Node tail=null;
		while(data !=-1)
		{
			Node newnode=new Node(data);
			if(head == null)
			{
				head=newnode;
				tail=newnode;    //now complexity is O(n);
			}
			else
			{
				tail.next=newnode;
				tail=newnode;
				//or tail=tail.next;
			}
				data=in.nextInt();
		}
		//in.close();
		return head;
		
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner in= new Scanner(System.in);
		//String s="continue";
		char ch='y';
		Node head=null;
		System.out.println("Enter Elements In Linked-List");
		head=input();
		while(ch=='y')
		{
		
			System.out.println("1.enter element at a perticular index");
			System.out.println("2.print elements");
			System.out.println("3.delete element from a perticular index");
			System.out.println("4.delete element with its value");
			System.out.println("5.enter ele at front");
			System.out.println("6.enter ele at end");
			System.out.println("7.delete ele from end");
			System.out.println("8.delete ele from front");
			System.out.println("enter you choice");
			int choice=in.nextInt();
			switch(choice)
			{
			case 1:
				System.out.println("enter the index at which you want to enter the element");
				int i=in.nextInt();
				System.out.println("enter the data which you want to enter");
				int data=in.nextInt();
				head=insert(head,i,data);
				break;
			case 2:
				print(head);
				break;
			case 3:
				System.out.println("1.enter index of ele you want to delete");
				int n=in.nextInt();
				head=delete(head,n);
				break;
			case 4:
				System.out.println("enter the vlaue of ele you want to delete");
				int d=in.nextInt();
				head=delete1(head,d);
				break;
			case 5:
				System.out.println("enter the ele");
				int d1=in.nextInt();
				head=ins_front(head,d1);
				break;
			case 6:
				System.out.println("enter the ele");
				int d2=in.nextInt();
				head=ins_end(head,d2);
				break;
			case 7:
				head=del_end(head);
				break;
			case 8:
				head=del_front(head);
				break;
			default:
				System.out.println("invalid choice");
			}
			System.out.println("enter y to continue else n to stop");
			ch=in.next().charAt(0);
		}
		System.out.println("Thank you :) !!");
		//in.close();
	}

}



